{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home MODULE MKAPI.CORE . BASE This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#mkapicorebase","text":"This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object.","title":"mkapi.core.base"},{"location":"#mkapicorebasebase","text":"Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute.","title":"mkapi.core.base.Base"},{"location":"#mkapicorebasebaseset_html","text":"Sets html attribute. Parameters html (str) \u2014 HTML output. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.base/","text":"MODULE MKAPI.CORE . BASE This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output. DATACLASS mkapi.core.base . Inline (name='', markdown='') Bases mkapi.core.base.Base Inline class. Examples >>> inline = Inline() >>> bool(inline) False >>> inline = Inline('markdown') >>> inline.name == inline.markdown True >>> bool(inline) True >>> next(iter(inline)) is inline True >>> inline.set_html(\"<p>p1</p><p>p2</p>\") >>> inline.html 'p1<br>p2' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. DATACLASS mkapi.core.base . Type (name='', markdown='') Bases mkapi.core.base.Inline mkapi.core.base.Base Type class represents type of Item , Section , Docstring , or Object . Examples >>> a = Type('str') >>> a Type(name='str', markdown='', html='str') >>> list(a) [] >>> b = Type('[Object](base.Object)') >>> b Type(name='[Object](base.Object)', markdown='[Object](base.Object)', html='') >>> list(b) == [b] True Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. DATACLASS mkapi.core.base . Item (name='', markdown='', type=<factory>, kind='') Bases mkapi.core.base.Type mkapi.core.base.Inline mkapi.core.base.Base Item class represents an item in Parameters, Attributes, and Raises sections, etc. Parameters type ( Type , optional) \u2014 Type of self. kind (str, optional) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Attributes desc ( Inline ) \u2014 Description of self. Examples >>> item = Item('[x](x)', 'A parameter.', Type('int')) >>> item.name, item.markdown, item.html ('[x](x)', '[x](x)', '') >>> item.type Type(name='int', markdown='', html='int') >>> item.desc Inline(name='A parameter.', markdown='A parameter.', html='') >>> it = iter(item) >>> next(it) is item True >>> next(it) is item.desc True >>> item.set_html('<p><strong>init</strong></p>') >>> item.html '__init__' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. DATACLASS mkapi.core.base . Section (name='', markdown='', items=<factory>, type=<factory>) Bases mkapi.core.base.Base Section class represents a section in docstring. Parameters items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type , optional) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('[y](a)'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['[y](a)'] Indexing: >>> isinstance(section['x'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True Methods set_html (html) \u2014 Sets html attribute. __iter__ () ( Base ) \u2014 Yields a Base instance that has non empty Markdown. __getitem__ (name) ( Item , optional) \u2014 Returns an Item instance whose name is equal to name . If not found, returns None. __delitem__ (name) \u2014 Delete an Item instance whose name is equal to name . __contains__ (name) (bool) \u2014 Returns True if there is an Item instance whose name is name . METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output. GENERATOR __iter__ () \u2192 Base Yields a Base instance that has non empty Markdown. Parameters name \u2014 Item name. METHOD __getitem__ (name) \u2192 Item , optional Returns an Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name. METHOD __delitem__ (name) Delete an Item instance whose name is equal to name . Parameters name \u2014 Item name. METHOD __contains__ (name) \u2192 bool Returns True if there is an Item instance whose name is name . Parameters name \u2014 Item name. DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' DATACLASS mkapi.core.base . Object (name='', prefix='', qualname='', kind='', signature=<factory>) Bases mkapi.core.base.Base Object class represents an object. Parameters name (str, optional) \u2014 Object name. prefix (str, optional) \u2014 Object prefix. qualname (str, optional) \u2014 Qualified name. kind (str, optional) \u2014 Object kind such as 'class', 'function', etc. signature ( Signature , optional) \u2014 Signature if object is module or callable. Attributes id (str) \u2014 ID attribute of HTML. type ( Type ) \u2014 Type for missing Returns and Yields sections. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"mkapi.core.base"},{"location":"api/mkapi.core.base/#mkapicorebase","text":"This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object.","title":"mkapi.core.base"},{"location":"api/mkapi.core.base/#mkapicorebasebase","text":"Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes html (str) \u2014 HTML output after conversion. Methods set_html (html) \u2014 Sets html attribute.","title":"mkapi.core.base.Base"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html","text":"Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.base/#mkapicorebaseinline","text":"Bases mkapi.core.base.Base Inline class. Examples >>> inline = Inline() >>> bool(inline) False >>> inline = Inline('markdown') >>> inline.name == inline.markdown True >>> bool(inline) True >>> next(iter(inline)) is inline True >>> inline.set_html(\"<p>p1</p><p>p2</p>\") >>> inline.html 'p1<br>p2' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Inline"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineiter","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Inline.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineset_html","text":"Sets html attribute cleaning p tags.","title":"mkapi.core.base.Inline.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasetype","text":"Bases mkapi.core.base.Inline mkapi.core.base.Base Type class represents type of Item , Section , Docstring , or Object . Examples >>> a = Type('str') >>> a Type(name='str', markdown='', html='str') >>> list(a) [] >>> b = Type('[Object](base.Object)') >>> b Type(name='[Object](base.Object)', markdown='[Object](base.Object)', html='') >>> list(b) == [b] True Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Type"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool_1","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineiter_1","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Inline.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineset_html_1","text":"Sets html attribute cleaning p tags.","title":"mkapi.core.base.Inline.set_html"},{"location":"api/mkapi.core.base/#mkapicorebaseitem","text":"Bases mkapi.core.base.Type mkapi.core.base.Inline mkapi.core.base.Base Item class represents an item in Parameters, Attributes, and Raises sections, etc. Parameters type ( Type , optional) \u2014 Type of self. kind (str, optional) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Attributes desc ( Inline ) \u2014 Description of self. Examples >>> item = Item('[x](x)', 'A parameter.', Type('int')) >>> item.name, item.markdown, item.html ('[x](x)', '[x](x)', '') >>> item.type Type(name='int', markdown='', html='int') >>> item.desc Inline(name='A parameter.', markdown='A parameter.', html='') >>> it = iter(item) >>> next(it) is item True >>> next(it) is item.desc True >>> item.set_html('<p><strong>init</strong></p>') >>> item.html '__init__' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Item"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool_2","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseitemiter","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Item.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseitemset_html","text":"Sets html attribute cleaning p tags.","title":"mkapi.core.base.Item.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasesection","text":"Bases mkapi.core.base.Base Section class represents a section in docstring. Parameters items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type , optional) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('[y](a)'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['[y](a)'] Indexing: >>> isinstance(section['x'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True Methods set_html (html) \u2014 Sets html attribute. __iter__ () ( Base ) \u2014 Yields a Base instance that has non empty Markdown. __getitem__ (name) ( Item , optional) \u2014 Returns an Item instance whose name is equal to name . If not found, returns None. __delitem__ (name) \u2014 Delete an Item instance whose name is equal to name . __contains__ (name) (bool) \u2014 Returns True if there is an Item instance whose name is name .","title":"mkapi.core.base.Section"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html_1","text":"Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasesectioniter","text":"Yields a Base instance that has non empty Markdown. Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.iter"},{"location":"api/mkapi.core.base/#mkapicorebasesectiongetitem","text":"Returns an Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.getitem"},{"location":"api/mkapi.core.base/#mkapicorebasesectiondelitem","text":"Delete an Item instance whose name is equal to name . Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.delitem"},{"location":"api/mkapi.core.base/#mkapicorebasesectioncontains","text":"Returns True if there is an Item instance whose name is name . Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.contains"},{"location":"api/mkapi.core.base/#mkapicorebasedocstring","text":"Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a'","title":"mkapi.core.base.Docstring"},{"location":"api/mkapi.core.base/#mkapicorebaseobject","text":"Bases mkapi.core.base.Base Object class represents an object. Parameters name (str, optional) \u2014 Object name. prefix (str, optional) \u2014 Object prefix. qualname (str, optional) \u2014 Qualified name. kind (str, optional) \u2014 Object kind such as 'class', 'function', etc. signature ( Signature , optional) \u2014 Signature if object is module or callable. Attributes id (str) \u2014 ID attribute of HTML. type ( Type ) \u2014 Type for missing Returns and Yields sections. Methods set_html (html) \u2014 Sets html attribute.","title":"mkapi.core.base.Object"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html_2","text":"Sets html attribute. Parameters html (str) \u2014 HTML output.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.docstring/","text":"MODULE MKAPI.CORE . DOCSTRING This module provides functions that parse docstring. Functions section_heading (line) (str, str) \u2014 Returns a tuple of (section name, style name). split_section (doc) (str, str, str) \u2014 Yields a tuple of (section name, contents, style). split_parameter (doc) (list of str) \u2014 Yields a list of parameter string. parse_parameter (lines,style) (str, str, str) \u2014 Returns a tuple of (name, markdown, type). parse_parameters (doc,style) (list of (str, str, str)) \u2014 Returns a list of (name, markdown, type). parse_returns (doc,style) (str, str) \u2014 Returns a tuple of (markdown, type). get_section (name,doc,style) ( Section ) \u2014 Returns a Section instance. parse_bases (doc,obj) \u2014 Parses base classes to create a Base(s) line. parse_property (doc,obj) \u2014 Parses property's docstring to inspect type. parse_attribute (doc,obj) \u2014 Parses attributes' docstring to inspect type and description from source. get_docstring (obj) ( Docstring ) \u2014 Returns a Docstring instance. FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') GENERATOR mkapi.core.docstring . split_section (doc) \u2192 (str, str, str) Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring . split_parameter (doc) \u2192 list of str Yields a list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring . parse_parameter (lines, style) \u2192 (str, str, str) Returns a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring . parse_parameters (doc, style) \u2192 list of (str, str, str) Returns a list of (name, markdown, type). FUNCTION mkapi.core.docstring . parse_returns (doc, style) \u2192 (str, str) Returns a tuple of (markdown, type). FUNCTION mkapi.core.docstring . get_section (name, doc, style) \u2192 Section Returns a Section instance. FUNCTION mkapi.core.docstring . parse_bases (doc, obj) Parses base classes to create a Base(s) line. FUNCTION mkapi.core.docstring . parse_property (doc, obj) Parses property's docstring to inspect type. FUNCTION mkapi.core.docstring . parse_attribute (doc, obj) Parses attributes' docstring to inspect type and description from source. FUNCTION mkapi.core.docstring . get_docstring (obj) \u2192 Docstring Returns a Docstring instance.","title":"mkapi.core.docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstring","text":"This module provides functions that parse docstring. Functions section_heading (line) (str, str) \u2014 Returns a tuple of (section name, style name). split_section (doc) (str, str, str) \u2014 Yields a tuple of (section name, contents, style). split_parameter (doc) (list of str) \u2014 Yields a list of parameter string. parse_parameter (lines,style) (str, str, str) \u2014 Returns a tuple of (name, markdown, type). parse_parameters (doc,style) (list of (str, str, str)) \u2014 Returns a list of (name, markdown, type). parse_returns (doc,style) (str, str) \u2014 Returns a tuple of (markdown, type). get_section (name,doc,style) ( Section ) \u2014 Returns a Section instance. parse_bases (doc,obj) \u2014 Parses base classes to create a Base(s) line. parse_property (doc,obj) \u2014 Parses property's docstring to inspect type. parse_attribute (doc,obj) \u2014 Parses attributes' docstring to inspect type and description from source. get_docstring (obj) ( Docstring ) \u2014 Returns a Docstring instance.","title":"mkapi.core.docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsection_heading","text":"Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '')","title":"mkapi.core.docstring.section_heading"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsplit_section","text":"Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google')","title":"mkapi.core.docstring.split_section"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsplit_parameter","text":"Yields a list of parameter string. Parameters doc (str) \u2014 Docstring","title":"mkapi.core.docstring.split_parameter"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_parameter","text":"Returns a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy .","title":"mkapi.core.docstring.parse_parameter"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_parameters","text":"Returns a list of (name, markdown, type).","title":"mkapi.core.docstring.parse_parameters"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_returns","text":"Returns a tuple of (markdown, type).","title":"mkapi.core.docstring.parse_returns"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringget_section","text":"Returns a Section instance.","title":"mkapi.core.docstring.get_section"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_bases","text":"Parses base classes to create a Base(s) line.","title":"mkapi.core.docstring.parse_bases"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse property","text":"Parses property's docstring to inspect type.","title":"mkapi.core.docstring.parse property"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_attribute","text":"Parses attributes' docstring to inspect type and description from source.","title":"mkapi.core.docstring.parse_attribute"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringget_docstring","text":"Returns a Docstring instance.","title":"mkapi.core.docstring.get_docstring"},{"location":"api/mkapi.core.inherit/","text":"MODULE MKAPI.CORE . INHERIT This module implements the functionality of docstring inheritance. Functions get_params (node,name) (dict(str: str), dict(str: str)) \u2014 Returns a tuple of (docstring params, signature params). is_complete (node,name) (bool) \u2014 Returns True if docstring is complete. inherit_base (node,base,name) \u2014 Inherits Parameters or Attributes section from base class. inherit_signature (node,name) \u2014 Inherits Parameters or Attributes section from signature. inherit_parameters (node) \u2014 Attributes section inherits items' markdown from Parameters section. get_bases (node) ( Node , iterator of Node ) \u2014 Yields a tuple of (Node instance, iterator of Node). inherit (node,strict) \u2014 Inherits Parameters and Attributes from superclasses. inherit_by_filters (node,filters) \u2014 Inherits Parameters and Attributes from superclasses. FUNCTION mkapi.core.inherit . get_params (node, name) \u2192 (dict(str: str), dict(str: str)) Returns a tuple of (docstring params, signature params). Each params is a dictionary of name-type mapping. Parameters node ( Node ) \u2014 Node instance. name (str) \u2014 Section name: Parameters or Attributes . Examples >>> node = get_node('mkapi.core.base.Type') >>> doc_params, sig_params = get_params(node, 'Parameters') >>> doc_params {} >>> sig_params {'name': 'str, optional', 'markdown': 'str, optional'} FUNCTION mkapi.core.inherit . is_complete (node, name='') \u2192 bool Returns True if docstring is complete. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are checked. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Base')) >>> is_complete(node, 'Parameters') True >>> node = Node(get_object('mkapi.core.base.Type')) >>> is_complete(node) False FUNCTION mkapi.core.inherit . inherit_base (node, base, name='') Inherits Parameters or Attributes section from base class. Parameters node ( Node ) \u2014 Node instance. base ( Node ) \u2014 Node instance of a super class. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> node.docstring['Parameters'] is None True >>> inherit_base(node, base) >>> [item.name for item in node.docstring['Parameters'].items] ['name', 'markdown'] FUNCTION mkapi.core.inherit . inherit_signature (node, name='') Inherits Parameters or Attributes section from signature. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> [item.name for item in base.docstring['Attributes'].items] ['html'] >>> inherit_signature(base) >>> [item.name for item in base.docstring['Attributes'].items] ['name', 'markdown', 'html'] FUNCTION mkapi.core.inherit . inherit_parameters (node) Attributes section inherits items' markdown from Parameters section. Parameters node ( Node ) \u2014 Node instance. Note This function does not create any items. Call inherit_signature () first. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> inherit_signature(base) >>> section = base.docstring['Attributes'] >>> [item.name for item in section.items] ['name', 'markdown', 'html'] >>> section['name'].desc.html '' >>> inherit_parameters(base) >>> section['name'].desc.markdown != '' True GENERATOR mkapi.core.inherit . get_bases (node) \u2192 ( Node , iterator of Node ) Yields a tuple of (Node instance, iterator of Node). Parameters node ( Node ) \u2014 Node instance. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Type')) >>> it = get_bases(node) >>> n, gen = next(it) >>> n is node True >>> [x.object.name for x in gen] ['Inline', 'Base'] >>> for n, gen in it: ... if n.object.name == 'set_html': ... break >>> [x.object.name for x in gen] ['set_html', 'set_html'] FUNCTION mkapi.core.inherit . inherit (node, strict=False) Inherits Parameters and Attributes from superclasses. This function calls inherit_base (), inherit_signature (), inherit_parameters (). Parameters node ( Node ) \u2014 Node instance. strict (bool, optional) \u2014 If True, inherits from signature, too. FUNCTION mkapi.core.inherit . inherit_by_filters (node, filters) Inherits Parameters and Attributes from superclasses. Parameters node ( Node ) \u2014 Node instance. filters (list of str) \u2014 Chose fileters. 'inherit' for superclass inheritance or 'strict' for signature inheritance.","title":"mkapi.core.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinherit","text":"This module implements the functionality of docstring inheritance. Functions get_params (node,name) (dict(str: str), dict(str: str)) \u2014 Returns a tuple of (docstring params, signature params). is_complete (node,name) (bool) \u2014 Returns True if docstring is complete. inherit_base (node,base,name) \u2014 Inherits Parameters or Attributes section from base class. inherit_signature (node,name) \u2014 Inherits Parameters or Attributes section from signature. inherit_parameters (node) \u2014 Attributes section inherits items' markdown from Parameters section. get_bases (node) ( Node , iterator of Node ) \u2014 Yields a tuple of (Node instance, iterator of Node). inherit (node,strict) \u2014 Inherits Parameters and Attributes from superclasses. inherit_by_filters (node,filters) \u2014 Inherits Parameters and Attributes from superclasses.","title":"mkapi.core.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritget_params","text":"Returns a tuple of (docstring params, signature params). Each params is a dictionary of name-type mapping. Parameters node ( Node ) \u2014 Node instance. name (str) \u2014 Section name: Parameters or Attributes . Examples >>> node = get_node('mkapi.core.base.Type') >>> doc_params, sig_params = get_params(node, 'Parameters') >>> doc_params {} >>> sig_params {'name': 'str, optional', 'markdown': 'str, optional'}","title":"mkapi.core.inherit.get_params"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritis_complete","text":"Returns True if docstring is complete. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are checked. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Base')) >>> is_complete(node, 'Parameters') True >>> node = Node(get_object('mkapi.core.base.Type')) >>> is_complete(node) False","title":"mkapi.core.inherit.is_complete"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_base","text":"Inherits Parameters or Attributes section from base class. Parameters node ( Node ) \u2014 Node instance. base ( Node ) \u2014 Node instance of a super class. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> node.docstring['Parameters'] is None True >>> inherit_base(node, base) >>> [item.name for item in node.docstring['Parameters'].items] ['name', 'markdown']","title":"mkapi.core.inherit.inherit_base"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_signature","text":"Inherits Parameters or Attributes section from signature. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> [item.name for item in base.docstring['Attributes'].items] ['html'] >>> inherit_signature(base) >>> [item.name for item in base.docstring['Attributes'].items] ['name', 'markdown', 'html']","title":"mkapi.core.inherit.inherit_signature"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_parameters","text":"Attributes section inherits items' markdown from Parameters section. Parameters node ( Node ) \u2014 Node instance. Note This function does not create any items. Call inherit_signature () first. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> inherit_signature(base) >>> section = base.docstring['Attributes'] >>> [item.name for item in section.items] ['name', 'markdown', 'html'] >>> section['name'].desc.html '' >>> inherit_parameters(base) >>> section['name'].desc.markdown != '' True","title":"mkapi.core.inherit.inherit_parameters"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritget_bases","text":"Yields a tuple of (Node instance, iterator of Node). Parameters node ( Node ) \u2014 Node instance. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Type')) >>> it = get_bases(node) >>> n, gen = next(it) >>> n is node True >>> [x.object.name for x in gen] ['Inline', 'Base'] >>> for n, gen in it: ... if n.object.name == 'set_html': ... break >>> [x.object.name for x in gen] ['set_html', 'set_html']","title":"mkapi.core.inherit.get_bases"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit","text":"Inherits Parameters and Attributes from superclasses. This function calls inherit_base (), inherit_signature (), inherit_parameters (). Parameters node ( Node ) \u2014 Node instance. strict (bool, optional) \u2014 If True, inherits from signature, too.","title":"mkapi.core.inherit.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_by_filters","text":"Inherits Parameters and Attributes from superclasses. Parameters node ( Node ) \u2014 Node instance. filters (list of str) \u2014 Chose fileters. 'inherit' for superclass inheritance or 'strict' for signature inheritance.","title":"mkapi.core.inherit.inherit_by_filters"},{"location":"api/mkapi.core.linker/","text":"MODULE MKAPI.CORE . LINKER This module provides functions that relate to link. Functions link (name,href) (str) \u2014 Reutrns Markdown link with a mark that indicates this link was created by MkApi. get_link (obj,include_module) (str) \u2014 Returns Markdown link for object, if possible. resolve_link (markdown,abs_src_path,abs_api_paths) (str) \u2014 Reutrns resolved link. resolve_object (html) (dict(str: any)) \u2014 Reutrns an object context dictionary. replace_link (obj,markdown) (str) \u2014 Returns a replaced link with object full name. FUNCTION mkapi.core.linker . link (name, href) \u2192 str Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)' FUNCTION mkapi.core.linker . get_link (obj, include_module=False) \u2192 str Returns Markdown link for object, if possible. Parameters obj (any) \u2014 Object include_module (bool, optional) \u2014 If True, link text includes module path. Examples >>> get_link(get_fullname) '[get_fullname](!mkapi.core.object.get_fullname)' >>> get_link(get_fullname, include_module=True) '[mkapi.core.object.get_fullname](!mkapi.core.object.get_fullname)' FUNCTION mkapi.core.linker . resolve_link (markdown, abs_src_path, abs_api_paths) \u2192 str Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)' FUNCTION mkapi.core.linker . resolve_object (html) \u2192 dict(str: any) Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'} FUNCTION mkapi.core.linker . replace_link (obj, markdown) \u2192 str Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"mkapi.core.linker"},{"location":"api/mkapi.core.linker/#mkapicorelinker","text":"This module provides functions that relate to link. Functions link (name,href) (str) \u2014 Reutrns Markdown link with a mark that indicates this link was created by MkApi. get_link (obj,include_module) (str) \u2014 Returns Markdown link for object, if possible. resolve_link (markdown,abs_src_path,abs_api_paths) (str) \u2014 Reutrns resolved link. resolve_object (html) (dict(str: any)) \u2014 Reutrns an object context dictionary. replace_link (obj,markdown) (str) \u2014 Returns a replaced link with object full name.","title":"mkapi.core.linker"},{"location":"api/mkapi.core.linker/#mkapicorelinkerlink","text":"Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)'","title":"mkapi.core.linker.link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerget_link","text":"Returns Markdown link for object, if possible. Parameters obj (any) \u2014 Object include_module (bool, optional) \u2014 If True, link text includes module path. Examples >>> get_link(get_fullname) '[get_fullname](!mkapi.core.object.get_fullname)' >>> get_link(get_fullname, include_module=True) '[mkapi.core.object.get_fullname](!mkapi.core.object.get_fullname)'","title":"mkapi.core.linker.get_link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerresolve_link","text":"Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)'","title":"mkapi.core.linker.resolve_link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerresolve_object","text":"Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'}","title":"mkapi.core.linker.resolve_object"},{"location":"api/mkapi.core.linker/#mkapicorelinkerreplace_link","text":"Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"mkapi.core.linker.replace_link"},{"location":"api/mkapi.core/","text":"PACKAGE MKAPI. CORE Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core/#mkapicore","text":"Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core.module/","text":"MODULE MKAPI.CORE . MODULE This modules provides Module class that has tree structure. Classes Module \u2014 Module class represents an module. Functions get_module (name) ( Module ) \u2014 Returns a Module instace by name or object. DATACLASS mkapi.core.module . Module (obj, recursive=True) Bases mkapi.core.tree.Tree Module class represents an module. Attributes parent (Module, optional) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. objects (list of str) \u2014 If self is module, object member names are collected in this list. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Module) \u2014 Returns a list of members. get_markdown (filters) (str) \u2014 Returns a Markdown source for docstring of this object. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Module Returns a list of members. METHOD get_markdown (filters) \u2192 str Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . FUNCTION mkapi.core.module . get_module (name) \u2192 Module Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.module"},{"location":"api/mkapi.core.module/#mkapicoremodule","text":"This modules provides Module class that has tree structure. Classes Module \u2014 Module class represents an module. Functions get_module (name) ( Module ) \u2014 Returns a Module instace by name or object.","title":"mkapi.core.module"},{"location":"api/mkapi.core.module/#mkapicoremodulemodule","text":"Bases mkapi.core.tree.Tree Module class represents an module. Attributes parent (Module, optional) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. objects (list of str) \u2014 If self is module, object member names are collected in this list. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Module) \u2014 Returns a list of members. get_markdown (filters) (str) \u2014 Returns a Markdown source for docstring of this object.","title":"mkapi.core.module.Module"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_kind","text":"Returns kind of self.","title":"mkapi.core.module.Module.get_kind"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_members","text":"Returns a list of members.","title":"mkapi.core.module.Module.get_members"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_markdown","text":"Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict .","title":"mkapi.core.module.Module.get_markdown"},{"location":"api/mkapi.core.module/#mkapicoremoduleget_module","text":"Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.module.get_module"},{"location":"api/mkapi.core.node/","text":"MODULE MKAPI.CORE . NODE This modules provides Node class that has tree structure. Classes Node \u2014 Node class represents an object. Functions is_member (name,obj,sourcefiles) (int) \u2014 Returns an integer thats indicates if obj is a member or not. get_node (name,recursive,sourcefile_index) ( Node ) \u2014 Returns a Node instace by name or object. DATACLASS mkapi.core.node . Node (obj, recursive=True, sourcefile_index=0) Bases mkapi.core.tree.Tree Node class represents an object. Parameters sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Attributes parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Node) \u2014 Returns a list of members. get_markdown (level,callback) (str) \u2014 Returns a Markdown source for docstring of this object. set_html (html) \u2014 Sets HTML to Base instances recursively. render () (str) \u2014 Renders and returns HTML. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Node Returns a list of members. METHOD get_markdown (level=0, callback=None) \u2192 str Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source. METHOD set_html (html) Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter. METHOD render () \u2192 str Renders and returns HTML. FUNCTION mkapi.core.node . is_member (name, obj, sourcefiles) \u2192 int Returns an integer thats indicates if obj is a member or not. $-1$ : Is not a member. $>0$ : Is a member. If the value is larger than 0, obj is defined in different file and the value is corresponding to the index of unique source files of superclasses. Parameters name (str) \u2014 Object name. obj (any) \u2014 Object sourcefiles (list of str) \u2014 Parent source files. If the parent is a class, those of the superclasses should be included in the order of mro() . FUNCTION mkapi.core.node . get_node (name, recursive=True, sourcefile_index=0) \u2192 Node Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself. sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0.","title":"mkapi.core.node"},{"location":"api/mkapi.core.node/#mkapicorenode","text":"This modules provides Node class that has tree structure. Classes Node \u2014 Node class represents an object. Functions is_member (name,obj,sourcefiles) (int) \u2014 Returns an integer thats indicates if obj is a member or not. get_node (name,recursive,sourcefile_index) ( Node ) \u2014 Returns a Node instace by name or object.","title":"mkapi.core.node"},{"location":"api/mkapi.core.node/#mkapicorenodenode","text":"Bases mkapi.core.tree.Tree Node class represents an object. Parameters sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Attributes parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Node) \u2014 Returns a list of members. get_markdown (level,callback) (str) \u2014 Returns a Markdown source for docstring of this object. set_html (html) \u2014 Sets HTML to Base instances recursively. render () (str) \u2014 Renders and returns HTML.","title":"mkapi.core.node.Node"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_kind","text":"Returns kind of self.","title":"mkapi.core.node.Node.get_kind"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_members","text":"Returns a list of members.","title":"mkapi.core.node.Node.get_members"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_markdown","text":"Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source.","title":"mkapi.core.node.Node.get_markdown"},{"location":"api/mkapi.core.node/#mkapicorenodenodeset_html","text":"Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter.","title":"mkapi.core.node.Node.set_html"},{"location":"api/mkapi.core.node/#mkapicorenodenoderender","text":"Renders and returns HTML.","title":"mkapi.core.node.Node.render"},{"location":"api/mkapi.core.node/#mkapicorenodeis_member","text":"Returns an integer thats indicates if obj is a member or not. $-1$ : Is not a member. $>0$ : Is a member. If the value is larger than 0, obj is defined in different file and the value is corresponding to the index of unique source files of superclasses. Parameters name (str) \u2014 Object name. obj (any) \u2014 Object sourcefiles (list of str) \u2014 Parent source files. If the parent is a class, those of the superclasses should be included in the order of mro() .","title":"mkapi.core.node.is_member"},{"location":"api/mkapi.core.node/#mkapicorenodeget_node","text":"Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself. sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0.","title":"mkapi.core.node.get_node"},{"location":"api/mkapi.core.object/","text":"MODULE MKAPI.CORE . OBJECT This module provides utility functions that relates to object. Functions get_object (name) (any) \u2014 Reutrns an object specified by name . get_fullname (obj,name) (str) \u2014 Reutrns an object full name specified by name . split_prefix_and_name (obj) (str, str) \u2014 Splits an object full name into prefix and name. get_sourcefiles (obj) (list of str) \u2014 Returns a list of source file. from_object (obj) (bool) \u2014 Returns True, if the docstring of obj is the same as that of object . FUNCTION mkapi.core.object . get_object (name) \u2192 any Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True FUNCTION mkapi.core.object . get_fullname (obj, name) \u2192 str Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') '' FUNCTION mkapi.core.object . split_prefix_and_name (obj) \u2192 (str, str) Splits an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown') FUNCTION mkapi.core.object . get_sourcefiles (obj) \u2192 list of str Returns a list of source file. If obj is a class, source files of its superclasses are also included. Parameters obj (any) \u2014 Object name. FUNCTION mkapi.core.object . from_object (obj) \u2192 bool Returns True, if the docstring of obj is the same as that of object . Parameters name \u2014 Object name. obj (any) \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"mkapi.core.object"},{"location":"api/mkapi.core.object/#mkapicoreobject","text":"This module provides utility functions that relates to object. Functions get_object (name) (any) \u2014 Reutrns an object specified by name . get_fullname (obj,name) (str) \u2014 Reutrns an object full name specified by name . split_prefix_and_name (obj) (str, str) \u2014 Splits an object full name into prefix and name. get_sourcefiles (obj) (list of str) \u2014 Returns a list of source file. from_object (obj) (bool) \u2014 Returns True, if the docstring of obj is the same as that of object .","title":"mkapi.core.object"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_object","text":"Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True","title":"mkapi.core.object.get_object"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_fullname","text":"Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') ''","title":"mkapi.core.object.get_fullname"},{"location":"api/mkapi.core.object/#mkapicoreobjectsplit_prefix_and_name","text":"Splits an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown')","title":"mkapi.core.object.split_prefix_and_name"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_sourcefiles","text":"Returns a list of source file. If obj is a class, source files of its superclasses are also included. Parameters obj (any) \u2014 Object name.","title":"mkapi.core.object.get_sourcefiles"},{"location":"api/mkapi.core.object/#mkapicoreobjectfrom_object","text":"Returns True, if the docstring of obj is the same as that of object . Parameters name \u2014 Object name. obj (any) \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"mkapi.core.object.from_object"},{"location":"api/mkapi.core.page/","text":"MODULE MKAPI.CORE . PAGE This module provides a Page class that works with other converter. Classes Page \u2014 Page class works with MkapiPlugin . DATACLASS mkapi.core.page . Page (source, abs_src_path, abs_api_paths=<factory>) Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. Methods content (html) (str) \u2014 Returns updated HTML to MkapiPlugin . METHOD content (html) \u2192 str Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"mkapi.core.page"},{"location":"api/mkapi.core.page/#mkapicorepage","text":"This module provides a Page class that works with other converter. Classes Page \u2014 Page class works with MkapiPlugin .","title":"mkapi.core.page"},{"location":"api/mkapi.core.page/#mkapicorepagepage","text":"Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. Methods content (html) (str) \u2014 Returns updated HTML to MkapiPlugin .","title":"mkapi.core.page.Page"},{"location":"api/mkapi.core.page/#mkapicorepagepagecontent","text":"Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"mkapi.core.page.Page.content"},{"location":"api/mkapi.core.renderer/","text":"MODULE MKAPI.CORE . RENDERER This module provides Renderer class that renders Node instance to create API documentation. Attributes renderer ( Renderer ) \u2014 Renderer instance that can be used globally. Classes Renderer \u2014 Renderer instance renders Node instance recursively to create API documentation. DATACLASS mkapi.core.renderer . Renderer () Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. Methods render (node,filters) (str) \u2014 Returns a rendered HTML for Node. render_node (node,object,docstring,members) (str) \u2014 Returns a rendered HTML for Node using prerendered components. render_object (object,filters) (str) \u2014 Returns a rendered HTML for Object. render_object_member (name,url,signature) (str) \u2014 Returns a rendered HTML for Object in toc. render_docstring (docstring) (str) \u2014 Returns a rendered HTML for Docstring. render_section (section) (str) \u2014 Returns a rendered HTML for Section. render_module (module,filters) (str) \u2014 Returns a rendered Markdown for Module. METHOD render (node, filters=None) \u2192 str Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance. METHOD render_node (node, object, docstring, members) \u2192 str Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances. METHOD render_object (object, filters=None) \u2192 str Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. heading \u2014 If True, object is written in a heading tag. upper \u2014 If True, object is written in upper case letters. METHOD render_object_member (name, url, signature) \u2192 str Returns a rendered HTML for Object in toc. Parameters name (str) \u2014 Object name. url (str) \u2014 Link to definition. signature (str) \u2014 Signature. METHOD render_docstring (docstring) \u2192 str Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance. METHOD render_section (section) \u2192 str Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance. METHOD render_module (module, filters) \u2192 str Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"mkapi.core.renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerenderer","text":"This module provides Renderer class that renders Node instance to create API documentation. Attributes renderer ( Renderer ) \u2014 Renderer instance that can be used globally. Classes Renderer \u2014 Renderer instance renders Node instance recursively to create API documentation.","title":"mkapi.core.renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrenderer","text":"Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. Methods render (node,filters) (str) \u2014 Returns a rendered HTML for Node. render_node (node,object,docstring,members) (str) \u2014 Returns a rendered HTML for Node using prerendered components. render_object (object,filters) (str) \u2014 Returns a rendered HTML for Object. render_object_member (name,url,signature) (str) \u2014 Returns a rendered HTML for Object in toc. render_docstring (docstring) (str) \u2014 Returns a rendered HTML for Docstring. render_section (section) (str) \u2014 Returns a rendered HTML for Section. render_module (module,filters) (str) \u2014 Returns a rendered Markdown for Module.","title":"mkapi.core.renderer.Renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender","text":"Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance.","title":"mkapi.core.renderer.Renderer.render"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_node","text":"Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances.","title":"mkapi.core.renderer.Renderer.render_node"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_object","text":"Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. heading \u2014 If True, object is written in a heading tag. upper \u2014 If True, object is written in upper case letters.","title":"mkapi.core.renderer.Renderer.render_object"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_object_member","text":"Returns a rendered HTML for Object in toc. Parameters name (str) \u2014 Object name. url (str) \u2014 Link to definition. signature (str) \u2014 Signature.","title":"mkapi.core.renderer.Renderer.render_object_member"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_docstring","text":"Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance.","title":"mkapi.core.renderer.Renderer.render_docstring"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_section","text":"Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance.","title":"mkapi.core.renderer.Renderer.render_section"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_module","text":"Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"mkapi.core.renderer.Renderer.render_module"},{"location":"api/mkapi.core.signature/","text":"MODULE MKAPI.CORE . SIGNATURE This module provides Signature class that inspects object and creates signature and types. Classes Signature \u2014 Signature class. Functions to_string (annotation,kind) (str) \u2014 Returns string expression of annotation. a_of_b (annotation) (str) \u2014 Returns A of B style string. union (annotation) (str) \u2014 Returns a string for union annotation. DATACLASS mkapi.core.signature . Signature (obj=None) Signature class. Parameters obj (any, optional) \u2014 Object Attributes signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section. FUNCTION mkapi.core.signature . to_string (annotation, kind='returns') \u2192 str Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)' FUNCTION mkapi.core.signature . a_of_b (annotation) \u2192 str Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float' FUNCTION mkapi.core.signature . union (annotation) \u2192 str Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"mkapi.core.signature"},{"location":"api/mkapi.core.signature/#mkapicoresignature","text":"This module provides Signature class that inspects object and creates signature and types. Classes Signature \u2014 Signature class. Functions to_string (annotation,kind) (str) \u2014 Returns string expression of annotation. a_of_b (annotation) (str) \u2014 Returns A of B style string. union (annotation) (str) \u2014 Returns a string for union annotation.","title":"mkapi.core.signature"},{"location":"api/mkapi.core.signature/#mkapicoresignaturesignature","text":"Signature class. Parameters obj (any, optional) \u2014 Object Attributes signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section.","title":"mkapi.core.signature.Signature"},{"location":"api/mkapi.core.signature/#mkapicoresignatureto_string","text":"Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)'","title":"mkapi.core.signature.to_string"},{"location":"api/mkapi.core.signature/#mkapicoresignaturea_of_b","text":"Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float'","title":"mkapi.core.signature.a_of_b"},{"location":"api/mkapi.core.signature/#mkapicoresignatureunion","text":"Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"mkapi.core.signature.union"},{"location":"api/mkapi.core.tree/","text":"MODULE MKAPI.CORE . TREE This module provides base class of Node and Module . Classes Tree \u2014 Tree class. This class is the base class of Node and Module . DATACLASS mkapi.core.tree . Tree (obj, recursive=True) Tree class. This class is the base class of Node and Module . Parameters obj (any) \u2014 Object. Attributes sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent instance. members (list of any) \u2014 Member instances. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Tree) \u2014 Returns a list of members. get_markdown () (str) \u2014 Returns a Markdown source for docstring of self. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Tree Returns a list of members. METHOD get_markdown () \u2192 str Returns a Markdown source for docstring of self.","title":"mkapi.core.tree"},{"location":"api/mkapi.core.tree/#mkapicoretree","text":"This module provides base class of Node and Module . Classes Tree \u2014 Tree class. This class is the base class of Node and Module .","title":"mkapi.core.tree"},{"location":"api/mkapi.core.tree/#mkapicoretreetree","text":"Tree class. This class is the base class of Node and Module . Parameters obj (any) \u2014 Object. Attributes sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent instance. members (list of any) \u2014 Member instances. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Tree) \u2014 Returns a list of members. get_markdown () (str) \u2014 Returns a Markdown source for docstring of self.","title":"mkapi.core.tree.Tree"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_kind","text":"Returns kind of self.","title":"mkapi.core.tree.Tree.get_kind"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_members","text":"Returns a list of members.","title":"mkapi.core.tree.Tree.get_members"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_markdown","text":"Returns a Markdown source for docstring of self.","title":"mkapi.core.tree.Tree.get_markdown"},{"location":"api/mkapi.plugins.mkdocs/","text":"MODULE MKAPI.PLUGINS. MKDOCS This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. Classes MkapiPlugin \u2014 MkapiPlugin class for API generation. CLASS mkapi.plugins.mkdocs . MkapiPlugin () Bases mkdocs.plugins.BasePlugin MkapiPlugin class for API generation. Methods load_config (options,config_file_path) \u2014 Load config from a dict of options. Returns a tuple of (errors, warnings). on_config (config) \u2014 Inserts src_dirs to sys.path . on_files (files,config) \u2014 Collects plugin CSS ans JavaScript and appends them to files . on_page_markdown (markdown,page,config,files) \u2014 Converts Markdown source to intermidiate version. on_page_content (html,page,config,files) \u2014 Merges html and MkApi's node structure. METHOD load_config (options, config_file_path=None) Load config from a dict of options. Returns a tuple of (errors, warnings). METHOD on_config (config) Inserts src_dirs to sys.path . METHOD on_files (files, config) Collects plugin CSS ans JavaScript and appends them to files . METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure.","title":"mkapi.plugins.mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocs","text":"This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. Classes MkapiPlugin \u2014 MkapiPlugin class for API generation.","title":"mkapi.plugins.mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapiplugin","text":"Bases mkdocs.plugins.BasePlugin MkapiPlugin class for API generation. Methods load_config (options,config_file_path) \u2014 Load config from a dict of options. Returns a tuple of (errors, warnings). on_config (config) \u2014 Inserts src_dirs to sys.path . on_files (files,config) \u2014 Collects plugin CSS ans JavaScript and appends them to files . on_page_markdown (markdown,page,config,files) \u2014 Converts Markdown source to intermidiate version. on_page_content (html,page,config,files) \u2014 Merges html and MkApi's node structure.","title":"mkapi.plugins.mkdocs.MkapiPlugin"},{"location":"api/mkapi.plugins.mkdocs/#mkdocspluginsbasepluginload_config","text":"Load config from a dict of options. Returns a tuple of (errors, warnings).","title":"mkdocs.plugins.BasePlugin.load_config"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_config","text":"Inserts src_dirs to sys.path .","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_config"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_files","text":"Collects plugin CSS ans JavaScript and appends them to files .","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_files"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_page_markdown","text":"Converts Markdown source to intermidiate version.","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_page_markdown"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_page_content","text":"Merges html and MkApi's node structure.","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_page_content"}]}